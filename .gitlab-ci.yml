stages:
  - test
  - build

variables:
  PROJECT_ROOT: /var/www/html
  WEB_DOCUMENT_ROOT: $PROJECT_ROOT/public
  LOG_STDOUT: $PROJECT_ROOT/var/log/stdout.log
  GIT_STRATEGY: clone
  NPM_CONFIG_CACHE: $PROJECT_ROOT/.cache/npm
  PM2_HOME: $PROJECT_ROOT/.cache/pm2
  COMPOSER_HOME: $PROJECT_ROOT/.cache/composer
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$PLUGIN_NAME
  DOCKWARE_CI: '1'
  APP_ENV: 'prod'
  APP_DEBUG: '0'
  APP_SECRET: '1122333secret'
  XDEBUG_ENABLED: '0'
  PHP_VERSION: '7.4'
  PLATFORM_BRANCH: '6.4.14.0'
  # things plugins might want to override
  PLUGIN_NAME: 'ShopgateConnectSW6'
  PLUGIN_FOLDER: $PROJECT_ROOT/custom/static-plugins/$PLUGIN_NAME
  PLUGIN_COMPOSER: 'shopgate/connect-shopware6'

# Cache libraries in between PR commits
.cache: &cache
  key: $PLUGIN_NAME-$PLATFORM_BRANCH
  policy: pull
  paths:
    - .cache

workflow:
  rules:
    # do not run on push
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null'
      when: never
    - when: always

.defaults: &defaults
  image: dockware/dev:$PLATFORM_BRANCH
  cache:
    <<: *cache
  before_script:
    - cp $CI_PROJECT_DIR/tests/assets/Migration1661693083TokenTestSamples.php $CI_PROJECT_DIR/src/Migration/
    - cd $PROJECT_ROOT
    - '[ -d $CI_PROJECT_DIR/.cache ] && mv $CI_PROJECT_DIR/.cache $PROJECT_ROOT/'
    - ln -fs $CI_PROJECT_DIR $PLUGIN_FOLDER
    - make --quiet -C $PROJECT_ROOT/../ xdebug-off
    - composer require --prefer-source --quiet $PLUGIN_COMPOSER:@dev
    - '[ ! -L "vendor/$PLUGIN_COMPOSER" ] && echo "Not symlinked! Pulled from packagist?" && exit 1'
    - bin/console plugin:refresh --quiet
    - bin/console plugin:install --quiet --activate $PLUGIN_NAME
    - bin/console sales-channel:update:domain "$HOSTNAME"
    - >
      if bin/console debug:container --parameter kernel.plugin_infos --format json | grep -q "$PLUGIN_NAME";
        then echo "$PLUGIN_NAME is active";
        else echo "$PLUGIN_NAME is not active"; exit 1;
      fi

newman:
  <<: *defaults
  stage: test
  cache:
    <<: *cache
    policy: pull-push
  parallel:
    matrix:
      - PLATFORM_BRANCH:
          - 6.4.8.0
          - 6.4.14.0
      - PHP_VERSION:
          - '8.0'
  except:
    - tags
  script:
    - export APP_URL="http://$HOSTNAME"
    - cd $CI_PROJECT_DIR/tests
    - npm install > /dev/null
    - npm run ci -- --env-var="host=$APP_URL"
      --reporter-htmlextra-export="$CI_PROJECT_DIR/postman-report.html"
      --reporter-junit-export="$CI_PROJECT_DIR/newman.junit.xml";
  after_script:
    - mv $PROJECT_ROOT/.cache $CI_PROJECT_DIR/
  artifacts:
    when: on_failure
    expire_in: 30 days
    reports:
      junit: newman.junit.xml
    paths:
      - ./postman-report.html

build zip:
  stage: build
  image:
    name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.4
    entrypoint: [ "" ]
  services: [ ]
  before_script: [ ]
  rules:
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG !~ /beta|alpha/i
  script:
    - ln -s "$(pwd)" "/plugins/${PLUGIN_NAME}"
    - cd /plugins/${PLUGIN_NAME}
    - plugin-uploader ext:zip --strategy=plain -- "$PWD"
    - mv ${PLUGIN_NAME}.zip $PROJECT_ROOT/
    - cd $PROJECT_ROOT
    - zip -d $(realpath "$PLUGIN_NAME.zip") "$PLUGIN_NAME/composer.lock"
    - '[[ -r $PLUGIN_NAME.zip ]] || (echo "failed to create $PLUGIN_NAME.zip. Please run ./bin/init $PLUGIN_NAME" && exit 1)'
  artifacts:
    name: '${PLUGIN_NAME}'
    expire_in: never
    paths:
      - '${PLUGIN_NAME}.zip'

register package:
  image: curlimages/curl:latest
  services: [ ]
  stage: build
  only:
    - tags
  variables:
    URL: "$CI_SERVER_PROTOCOL://$CI_SERVER_HOST:$CI_SERVER_PORT/api/v4/projects/$CI_PROJECT_ID/packages/composer?job_token=$CI_JOB_TOKEN"
  before_script: [ ]
  script:
    - version=$([[ -z "$CI_COMMIT_TAG" ]] && echo "branch=$CI_COMMIT_REF_NAME" || echo "tag=$CI_COMMIT_TAG")
    - insecure=$([ "$CI_SERVER_PROTOCOL" = "http" ] && echo "--insecure" || echo "")
    - response=$(curl -s -w "\n%{http_code}" $insecure --data $version $URL)
    - code=$(echo "$response" | tail -n 1)
    - body=$(echo "$response" | head -n 1)
    # Output state information
    - if [ $code -eq 201 ]; then
      echo "Package created - Code $code - $body";
      else
      echo "Could not create package - Code $code - $body";
      exit 1;
      fi
