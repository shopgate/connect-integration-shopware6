stages:
  - test
  - build

variables:
  PROJECT_ROOT: ${CI_PROJECT_DIR}
  WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/public
  LOG_STDOUT: $CI_PROJECT_DIR/var/log/stdout.log
  MYSQL_DATABASE: shopware
  MYSQL_ROOT_PASSWORD: rootPass
  DATABASE_URL: "mysql://root:rootPass@database:3306/shopware?sslmode=disable&charset=utf8mb4"
  GIT_STRATEGY: clone
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.cache/npm"
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$PLUGIN_NAME
  # things plugins might want to override
  APP_ENV: dev
  APP_DEBUG: 0
  APP_SECRET: '1122333secret'
  MYSQL_IMAGE: mariadb:10.3
  MYSQL_CMD: mysqld
  PHP: '7.4'
  PLATFORM_BRANCH: 6.4.8.0
  PLUGIN_NAME: 'ShopgateConnectSW6'

# Cache libraries in between PR commits
.cache: &cache
  key: $PLUGIN_NAME-$PLATFORM_BRANCH
  policy: pull
  paths:
    - .cache/npm
    - vendor/

workflow:
  rules:
    # do not run on push
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null'
      when: never
    - when: always

.defaults: &defaults
  image: shopware/development:$PHP-composer-2
  cache:
    <<: *cache
  services:
    - name: $MYSQL_IMAGE
      alias: database
      entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
  before_script:
    - export APP_URL="http://$HOSTNAME"
    - export PLUGIN_FOLDER="custom/static-plugins/$PLUGIN_NAME"
    - >
      [ -d vendor ] && mv vendor /tmp/
      [ -d .cache/npm ] && mv .cache/npm /tmp/
    - zip -rq plugin.zip .
    - mv plugin.zip /tmp/plugin.zip
    - rm -Rf .* * || true
    - git clone https://github.com/shopware/platform.git . --branch $PLATFORM_BRANCH --depth 1
    - git rev-parse --abbrev-ref HEAD
    - >
      [ -d /tmp/vendor ] && mv /tmp/vendor ./
      [ -d /tmp/.cache ] && mv /tmp/.cache ./
    - mkdir -p custom/plugins || true
    - mkdir -p custom/static-plugins || true
    - unzip -q /tmp/plugin.zip -d $PLUGIN_FOLDER
    - >
      composer config repositories.sym '{"type": "path", "url": "custom/static-plugins/*", "options": {"symlink": true}}'
    - composer config --no-interaction allow-plugins.bamarni/composer-bin-plugin true
    - composer require shopgate/connect-shopware6 --no-update
    - composer install -n
    - mkdir -p config/jwt || true
    - bin/console system:install --drop-database --basic-setup --force --no-interaction --quiet
    - bin/console plugin:refresh --quiet
    - APP_ENV=prod php bin/console store:download -p SwagPlatformDemoData
    - bin/console plugin:install --quiet --activate --skip-asset-build SwagPlatformDemoData
    - bin/console plugin:install --quiet --activate --clearCache $PLUGIN_NAME
    - >
      if bin/console debug:container --parameter kernel.plugin_infos --format json | grep -q "$PLUGIN_NAME";
        then echo "$PLUGIN_NAME is active";
        else echo "$PLUGIN_NAME is not active"; exit 1;
      fi
    - chown -R 1000:1000 .
    - /entrypoint supervisord > /dev/null 2>&1 &
  after_script:
    - rm -f vendor/shopgate/connect-shopware6

newman:
  <<: *defaults
  stage: test
  cache:
    <<: *cache
    policy: pull-push
  parallel:
    matrix:
      - PLATFORM_BRANCH:
          - 6.4.8.0
          - 6.4.13.0
      - PHP:
          - '8.0'
  rules:
    - if: '$CI_COMMIT_TAG == null'
  script:
    - npm install -g newman@^5.3.0 newman-reporter-htmlextra newman-reporter-junitfull > /dev/null
    - cd $PLUGIN_FOLDER/tests/Postman;
    - newman run ./collection.json -e ./environment.json -r cli,htmlextra,junitfull
      --reporter-htmlextra-export ${PROJECT_ROOT}/postman-report.html --reporter-junitfull-export ${PROJECT_ROOT}/newman.junit.xml
      --color on --insecure --no-insecure-file-read
      --env-var "host=$APP_URL";
  artifacts:
    when: on_failure
    expire_in: 30 days
    reports:
      junit: newman.junit.xml
    paths:
      - ./postman-report.html

build zip:
  stage: build
  image:
    name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.4
    entrypoint: [ "" ]
  services: [ ]
  before_script: [ ]
  rules:
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG !~ /beta|alpha/i
  script:
    - ln -s "$(pwd)" "/plugins/${PLUGIN_NAME}"
    - cd /plugins/${PLUGIN_NAME}
    - plugin-uploader ext:zip --strategy=plain -- "$PWD"
    - mv ${PLUGIN_NAME}.zip $PROJECT_ROOT/
    - cd $PROJECT_ROOT
    - zip -d $(realpath "$PLUGIN_NAME.zip") "$PLUGIN_NAME/composer.lock"
    - '[[ -r $PLUGIN_NAME.zip ]] || (echo "failed to create $PLUGIN_NAME.zip. Please run ./bin/init $PLUGIN_NAME" && exit 1)'
  artifacts:
    name: '${PLUGIN_NAME}'
    expire_in: never
    paths:
      - '${PLUGIN_NAME}.zip'

register package:
  image: curlimages/curl:latest
  services: [ ]
  stage: build
  only:
    - tags
  variables:
    URL: "$CI_SERVER_PROTOCOL://$CI_SERVER_HOST:$CI_SERVER_PORT/api/v4/projects/$CI_PROJECT_ID/packages/composer?job_token=$CI_JOB_TOKEN"
  before_script: [ ]
  script:
    - version=$([[ -z "$CI_COMMIT_TAG" ]] && echo "branch=$CI_COMMIT_REF_NAME" || echo "tag=$CI_COMMIT_TAG")
    - insecure=$([ "$CI_SERVER_PROTOCOL" = "http" ] && echo "--insecure" || echo "")
    - response=$(curl -s -w "\n%{http_code}" $insecure --data $version $URL)
    - code=$(echo "$response" | tail -n 1)
    - body=$(echo "$response" | head -n 1)
    # Output state information
    - if [ $code -eq 201 ]; then
      echo "Package created - Code $code - $body";
      else
      echo "Could not create package - Code $code - $body";
      exit 1;
      fi
