{
  "info": {
    "_postman_id": "1f66b7dc-21b8-4886-bb54-7917b9786664",
    "name": "SW6 SG Connect",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "SW: get channel key",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Has access key\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    const storeFront = jsonData.data.find((channel) => channel.name === 'Storefront')\r",
              "    pm.expect(storeFront).not.be.undefined;\r",
              "    pm.expect(storeFront.accessKey).to.be.a('string');\r",
              "    pm.environment.set(\"gen_accessKey\", storeFront.accessKey);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disabledSystemHeaders": {}
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{gen_access_token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"includes\": {\r\n        \"sales_channel\": [\"name\", \"accessKey\"]\r\n    }\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{sw_endpoint_api}}/search/sales-channel",
          "host": [
            "{{sw_endpoint_api}}"
          ],
          "path": [
            "search",
            "sales-channel"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Fetch the current context",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Save context token\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.token).to.be.a('string');\r",
              "    pm.environment.set(\"gen_contextToken\", jsonData.token);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "value",
              "value": "{{gen_accessKey}}",
              "type": "string"
            },
            {
              "key": "key",
              "value": "sw-access-key",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "description": "(Required) Content type of the request",
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "description": "(Required) Accepted response content types",
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{sw_store_api}}/context",
          "host": [
            "{{sw_store_api}}"
          ],
          "path": [
            "context"
          ]
        },
        "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
      },
      "response": [
        {
          "name": "Returns the current context.",
          "originalRequest": {
            "method": "GET",
            "header": [
              {
                "description": "Added as a part of security scheme: apikey",
                "key": "sw-access-key",
                "value": "{{apiKey}}"
              },
              {
                "description": "(Required) Content type of the request",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "(Required) Accepted response content types",
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/context",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "context"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"apiAlias\": \"ea\",\n  \"token\": \"dolor est eu\",\n  \"currentCustomerGroup\": {\n    \"name\": \"enim do\",\n    \"displayGross\": true\n  },\n  \"fallbackCustomerGroup\": {\n    \"name\": \"consectetur Ut aliquip\",\n    \"displayGross\": true\n  },\n  \"currency\": {\n    \"isoCode\": \"officia commodo\",\n    \"factor\": -68852605,\n    \"symbol\": \"ut esse qui\",\n    \"shortName\": \"eiusmod magna anim\",\n    \"name\": \"eu in ut dolore\",\n    \"position\": 59441736,\n    \"decimalPrecision\": 83675231,\n    \"isSystemDefault\": false\n  },\n  \"salesChannel\": {\n    \"typeId\": \"dolore ex ut aliquip\",\n    \"languageId\": \"id occaecat ut ut\",\n    \"currencyId\": \"nostrud\",\n    \"paymentMethodId\": \"occaecat\",\n    \"shippingMethodId\": \"qui ad anim culpa\",\n    \"countryId\": \"sint aliquip irure\",\n    \"navigationCategoryId\": \"ullamco ea id ipsum\",\n    \"navigationCategoryDepth\": 44879814,\n    \"footerCategoryId\": \"nisi occaecat dolor pariatur\",\n    \"serviceCategoryId\": \"consequat mollit ad ea officia\",\n    \"name\": \"voluptate tempor veniam dolore\",\n    \"shortName\": \"in veniam deserunt\",\n    \"accessKey\": \"ea c\",\n    \"active\": false,\n    \"maintenance\": true,\n    \"maintenanceIpWhitelist\": \"occaecat ipsum et\",\n    \"mailHeaderFooterId\": \"dolore nulla adipisicing veniam conse\",\n    \"customerGroupId\": \"tempor anim dolor elit nulla\",\n    \"hreflangActive\": false,\n    \"hreflangDefaultDomainId\": \"non laborum\",\n    \"analyticsId\": \"enim eu sint fugiat\"\n  },\n  \"taxRules\": [\n    {\n      \"taxRate\": 90957299.5992665,\n      \"name\": \"Lorem ad dolore quis\"\n    },\n    {\n      \"taxRate\": -9625105.030287132,\n      \"name\": \"qui laboris exercitation occaecat anim\"\n    }\n  ],\n  \"customer\": {\n    \"groupId\": \"dolore esse\",\n    \"defaultPaymentMethodId\": \"in ex labore \",\n    \"salesChannelId\": \"ipsum Lorem nisi fugiat sint\",\n    \"languageId\": \"in\",\n    \"lastPaymentMethodId\": \"reprehenderit in ut\",\n    \"defaultBillingAddressId\": \"ullamco\",\n    \"defaultShippingAddressId\": \"id laboris sed\",\n    \"customerNumber\": \"dolor sint\",\n    \"salutationId\": \"culpa id\",\n    \"firstName\": \"aliquip ut\",\n    \"lastName\": \"exercitation dolore\",\n    \"company\": \"Duis pariatur\",\n    \"password\": \"irure in enim\",\n    \"email\": \"laborum ex voluptate ea\",\n    \"title\": \"eu consectetur Ut\",\n    \"affiliateCode\": \"do\",\n    \"campaignCode\": \"dolor nisi\",\n    \"active\": true,\n    \"doubleOptInRegistration\": false,\n    \"doubleOptInEmailSentDate\": \"1996-11-22T14:22:18.999Z\",\n    \"doubleOptInConfirmDate\": \"1954-05-02T03:56:41.029Z\",\n    \"hash\": \"tempor Duis d\",\n    \"guest\": false,\n    \"firstLogin\": \"1956-02-07T02:39:37.055Z\",\n    \"lastLogin\": \"1960-04-15T00:24:01.660Z\",\n    \"newsletter\": true,\n    \"birthday\": \"1991-09-14T18:35:11.263Z\",\n    \"lastOrderDate\": \"1995-11-03T21:41:52.078Z\",\n    \"orderCount\": 43918618,\n    \"legacyEncoder\": \"nulla sunt aliqua veniam\",\n    \"legacyPassword\": \"elit deserunt in culpa\",\n    \"autoIncrement\": -46218338,\n    \"remoteAddress\": \"amet magna ullamco\"\n  },\n  \"paymentMethod\": {\n    \"pluginId\": \"qui \",\n    \"handlerIdentifier\": \"Duis consequat\",\n    \"name\": \"laboris proident aliqua mollit\",\n    \"description\": \"nulla\",\n    \"position\": 69921545,\n    \"active\": true,\n    \"availabilityRuleId\": \"id\",\n    \"mediaId\": \"adipisicing do esse consectetur\",\n    \"formattedHandlerIdentifier\": \"occaecat tempor\"\n  },\n  \"shippingMethod\": {\n    \"name\": \"cillum\",\n    \"active\": true,\n    \"description\": \"consequat ut\",\n    \"trackingUrl\": \"est quis amet\",\n    \"deliveryTimeId\": \"fugiat ex sed sint\",\n    \"availabilityRuleId\": \"ad quis\",\n    \"mediaId\": \"elit Lorem quis et dolore\"\n  },\n  \"context\": {\n    \"versionId\": \"eiusmod irure\",\n    \"currencyId\": \"deserunt commodo\",\n    \"currencyFactor\": -19862713,\n    \"currencyPrecision\": -78420921,\n    \"scope\": \"occaecat\",\n    \"source\": \"ut nulla eu mollit\",\n    \"taxState\": \"dolor consectetur id sint aliqua\",\n    \"useCache\": false\n  }\n}"
        }
      ]
    },
    {
      "name": "Log in a customer",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Save context token\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.contextToken).to.be.a('string');\r",
              "    pm.environment.set(\"gen_contextToken\", jsonData.contextToken);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "value",
              "value": "{{gen_accessKey}}",
              "type": "string"
            },
            {
              "key": "key",
              "value": "sw-access-key",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "description": "(Required) Content type of the request",
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "description": "(Required) Accepted response content types",
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "sw-context-token",
            "value": "{{gen_contextToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{sw_store_api}}/account/login",
          "host": [
            "{{sw_store_api}}"
          ],
          "path": [
            "account",
            "login"
          ]
        },
        "description": "Logs in customers given their credentials."
      },
      "response": [
        {
          "name": "A successful login returns a context token which is associated with the logged in user. Use that as your `sw-context-token` header for subsequent requests.",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "description": "Added as a part of security scheme: apikey",
                "key": "sw-access-key",
                "value": "{{apiKey}}"
              },
              {
                "description": "(Required) Content type of the request",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "(Required) Accepted response content types",
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"aliquip\",\n  \"password\": \"aliqua mollit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/account/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "account",
                "login"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"contextToken\": \"officia sit minim sunt\"\n}"
        },
        {
          "name": "If credentials are incorrect an error is returned",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "description": "Added as a part of security scheme: apikey",
                "key": "sw-access-key",
                "value": "{{apiKey}}"
              },
              {
                "description": "(Required) Content type of the request",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "(Required) Accepted response content types",
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"aliquip\",\n  \"password\": \"aliqua mollit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/account/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "account",
                "login"
              ]
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    {\n      \"id\": \"elit deserunt anim\",\n      \"links\": {\n        \"non_41c\": \"https://amphPntjNrPIvATAKBdNNmy.sqbwr6Pr17dylNZJ2ie+kQY5w\"\n      },\n      \"status\": \"cupidatat consequat do Ut in\",\n      \"code\": \"minim mollit Lorem ullamco\",\n      \"title\": \"Lorem aute in\",\n      \"detail\": \"Ut non\",\n      \"source\": {\n        \"pointer\": \"magna deserunt\",\n        \"parameter\": \"dolor voluptate velit laboris\"\n      },\n      \"meta\": {\n        \"exercitation2_1\": -7211244\n      }\n    },\n    {\n      \"id\": \"consequat ut\",\n      \"links\": {\n        \"anim_71\": \"http://qGzMxoQxaKpAKg.sjQ-bSkAHUB.lcqBMrKSSo+fOvgiNtoEVllGbQX8uGNDrAUHqIZrL+9?flsk&\"\n      },\n      \"status\": \"veniam et\",\n      \"code\": \"aliqua sed\",\n      \"title\": \"Lorem consequat\",\n      \"detail\": \"ex sit in\",\n      \"source\": {\n        \"pointer\": \"ut in\",\n        \"parameter\": \"occaecat do Lorem ullamco esse\"\n      },\n      \"meta\": {\n        \"laborum_e\": \"consequat veniam tempor\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"adba\": -33550490,\n    \"eu__2\": \"in\"\n  },\n  \"links\": {\n    \"fugiat22\": \"https://dLXCZjVIaxFC.haegj8MMpow,Zl.b\"\n  }\n}"
        }
      ]
    },
    {
      "name": "get sg login token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Has token\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.token).to.be.a('string')\r",
              "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
              "    pm.expect(jsonData.expiration).to.be.a('number');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "value",
              "value": "{{gen_accessKey}}",
              "type": "string"
            },
            {
              "key": "key",
              "value": "sw-access-key",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "description": "(Required) Content type of the request",
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "description": "(Required) Accepted response content types",
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "sw-context-token",
            "value": "{{gen_contextToken}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{sw_store_api}}/sgconnect/login/token",
          "host": [
            "{{sw_store_api}}"
          ],
          "path": [
            "sgconnect",
            "login",
            "token"
          ]
        },
        "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
      },
      "response": [
        {
          "name": "Return a token",
          "originalRequest": {
            "method": "GET",
            "header": [
              {
                "description": "Added as a part of security scheme: apikey",
                "key": "sw-access-key",
                "value": "{{apiKey}}"
              },
              {
                "description": "(Required) Content type of the request",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "(Required) Accepted response content types",
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sitemap",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sitemap"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"token\": \"osadpkasodkpod1219i2%#1mk121\"\n}\n"
        }
      ]
    },
    {
      "name": "Log out a customer",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Save context token\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.contextToken).to.be.a('string');\r",
              "    pm.environment.set(\"gen_contextToken\", jsonData.contextToken);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "value",
              "value": "{{gen_accessKey}}",
              "type": "string"
            },
            {
              "key": "key",
              "value": "sw-access-key",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "description": "(Required) Content type of the request",
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "description": "(Required) Accepted response content types",
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "sw-context-token",
            "value": "{{gen_contextToken}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{sw_store_api}}/account/logout",
          "host": [
            "{{sw_store_api}}"
          ],
          "path": [
            "account",
            "logout"
          ]
        },
        "description": "Logs out a customer."
      },
      "response": [
        {
          "name": "A successful logout returns a context token for the anonymous user. Use that as your `sw-context-token` header for subsequent requests.",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "description": "Added as a part of security scheme: apikey",
                "key": "sw-access-key",
                "value": "{{apiKey}}"
              },
              {
                "description": "(Required) Content type of the request",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "(Required) Accepted response content types",
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/account/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "account",
                "logout"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"contextToken\": \"officia sit minim sunt\"\n}"
        },
        {
          "name": "If the user is not logged in, a 403 error is returned.",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "description": "Added as a part of security scheme: apikey",
                "key": "sw-access-key",
                "value": "{{apiKey}}"
              },
              {
                "description": "(Required) Content type of the request",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "(Required) Accepted response content types",
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/account/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "account",
                "logout"
              ]
            }
          },
          "status": "Forbidden",
          "code": 403,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{}"
        }
      ]
    },
    {
      "name": "not logged in error",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 403\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "value",
              "value": "{{gen_accessKey}}",
              "type": "string"
            },
            {
              "key": "key",
              "value": "sw-access-key",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "description": "(Required) Content type of the request",
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "description": "(Required) Accepted response content types",
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "sw-context-token",
            "value": "{{gen_contextToken}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{sw_store_api}}/sgconnect/login/token",
          "host": [
            "{{sw_store_api}}"
          ],
          "path": [
            "sgconnect",
            "login",
            "token"
          ]
        },
        "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
      },
      "response": [
        {
          "name": "Return a token",
          "originalRequest": {
            "method": "GET",
            "header": [
              {
                "description": "Added as a part of security scheme: apikey",
                "key": "sw-access-key",
                "value": "{{apiKey}}"
              },
              {
                "description": "(Required) Content type of the request",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "(Required) Accepted response content types",
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sitemap",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sitemap"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"token\": \"osadpkasodkpod1219i2%#1mk121\"\n}\n"
        }
      ]
    },
    {
      "name": "Frontend login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var jsonObject = xml2Json(responseBody);\r",
              "pm.test(\"Should be cart page\", function () {\r",
              "    pm.response.headers.all().map(header => {\r",
              "        if(header.key === 'X-Symfony-Cache'){\r",
              "            pm.expect(header.value).to.include('/checkout/cart', 'should be cart page');\r",
              "        }\r",
              "    })\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const jar = pm.cookies.jar();\r",
              "// jar.getAll(pm.environment.get(\"host\"), (error, cookies) => console.log(cookies))\r",
              "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
              "    if (error) {\r",
              "        console.log(error.message)\r",
              "    }\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{host}}/sgconnect/login?token={{gen_login_token}}",
          "host": [
            "{{host}}"
          ],
          "path": [
            "sgconnect",
            "login"
          ],
          "query": [
            {
              "key": "token",
              "value": "{{gen_login_token}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "/**",
          " * SW Token generation",
          " */",
          "var getToken = true;",
          "if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
          "    console.log('Token or expiry date are missing');",
          "} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
          "    console.log('Token is expired');",
          "} else {",
          "    getToken = false;",
          "}",
          "",
          "if (getToken === true) {",
          "    const createRequest = {",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"grant_type\": \"password\",",
          "        \"scopes\": \"write\",",
          "        \"username\": pm.environment.get(\"sw_admin\"),",
          "        \"password\": pm.environment.get(\"sw_pass\")",
          "    };",
          "    const refreshRequest = {",
          "        \"grant_type\": \"refresh_token\",",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
          "    };",
          "    // SW Auth",
          "    const authRequest = {",
          "        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
          "        method: 'POST',",
          "        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
          "        body: {",
          "            mode: 'application/json'",
          "        }",
          "    };",
          "    // set body depending on type of request needed",
          "    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
          "    pm.sendRequest(authRequest, function (err, res) {",
          "        if (res.code !== 200) {",
          "            pm.environment.unset('gen_access_token');",
          "            pm.environment.unset('gen_token_expires');",
          "            pm.environment.unset('gen_refresh_token');",
          "            console.log('Invalidated refresh token');",
          "            return;",
          "        }",
          "        ",
          "        var responseJson = res.json();",
          "        pm.environment.set('gen_access_token', responseJson.access_token)",
          "",
          "        var expiryDate = new Date();",
          "        expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
          "        pm.environment.set('gen_token_expires', expiryDate.getTime());",
          "        pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
          "        console.log('Saved the token and expiry date');",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// remove generated token data if not authorized",
          "if (pm.response.code === 401) {",
          "    console.log('Removing tokens due to 401 response. Please try again.');",
          "    pm.environment.unset('gen_access_token');",
          "    pm.environment.unset('gen_token_expires');",
          "    pm.environment.unset('gen_refresh_token');",
          "}"
        ]
      }
    }
  ]
}
